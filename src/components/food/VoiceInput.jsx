import React, { useState, useRef } from "react";
import { processVoiceInput } from "../../utils/foodRecognition";
import FoodConfirmation from "./FoodConfirmation";

function VoiceInput({ onProcessingStart, onFoodRecognized }) {
  const [isRecording, setIsRecording] = useState(false);
  const [recognizedFood, setRecognizedFood] = useState(null);
  const mediaRecorder = useRef(null);
  const audioChunks = useRef([]);

  const startRecording = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      mediaRecorder.current = new MediaRecorder(stream);

      mediaRecorder.current.ondataavailable = (event) => {
        audioChunks.current.push(event.data);
      };

      mediaRecorder.current.onstop = async () => {
        const audioBlob = new Blob(audioChunks.current, { type: "audio/wav" });
        audioChunks.current = [];

        onProcessingStart();

        try {
          const results = await processVoiceInput(audioBlob);
          setRecognizedFood(results);
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞:", error);
          alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        }

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç—Ä–µ–∫–∏
        stream.getTracks().forEach((track) => track.stop());
      };

      mediaRecorder.current.start();
      setIsRecording(true);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É:", error);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è.");
    }
  };

  const stopRecording = () => {
    if (mediaRecorder.current && isRecording) {
      mediaRecorder.current.stop();
      setIsRecording(false);
    }
  };

  const handleConfirm = (confirmedFood) => {
    onFoodRecognized(confirmedFood);
    setRecognizedFood(null);
  };

  const handleCancel = () => {
    setRecognizedFood(null);
  };

  if (recognizedFood) {
    return (
      <FoodConfirmation
        recognizedFood={recognizedFood}
        onConfirm={handleConfirm}
        onCancel={handleCancel}
        source="voice"
      />
    );
  }

  return (
    <div className="card">
      <h3 style={{ marginBottom: "16px", fontSize: "18px" }}>
        üé§ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ —á—Ç–æ —Å—ä–µ–ª–∏
      </h3>

      <div style={{ textAlign: "center", padding: "20px" }}>
        {isRecording ? (
          <div>
            <div
              style={{
                fontSize: "64px",
                marginBottom: "16px",
                animation: "pulse 1.5s ease-in-out infinite",
              }}
            >
              üî¥
            </div>
            <div
              style={{
                fontSize: "18px",
                fontWeight: "600",
                marginBottom: "8px",
              }}
            >
              –ò–¥–µ—Ç –∑–∞–ø–∏—Å—å...
            </div>
            <div
              style={{
                fontSize: "14px",
                color: "var(--secondary-text-color)",
                marginBottom: "20px",
              }}
            >
              –ì–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç–∫–æ –∏ –Ω–µ —Ç–æ—Ä–æ–ø—è—Å—å
            </div>
            <button
              className="btn btn-secondary"
              onClick={stopRecording}
              style={{ fontSize: "16px", padding: "12px 24px" }}
            >
              ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
            </button>
          </div>
        ) : (
          <div>
            <div style={{ fontSize: "64px", marginBottom: "16px" }}>üé§</div>
            <div
              style={{
                fontSize: "18px",
                fontWeight: "600",
                marginBottom: "8px",
              }}
            >
              –ù–∞–∂–º–∏—Ç–µ –∏ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ
            </div>
            <div
              style={{
                fontSize: "14px",
                color: "var(--secondary-text-color)",
                marginBottom: "20px",
              }}
            >
              –ù–∞–ø—Ä–∏–º–µ—Ä: "–°—ä–µ–ª 200 –≥—Ä–∞–º–º –∫—É—Ä–∏–Ω–æ–π –≥—Ä—É–¥–∫–∏ –∏ —Ä–∏—Å"
            </div>
            <button
              className="btn btn-primary"
              onClick={startRecording}
              style={{ fontSize: "16px", padding: "12px 24px" }}
            >
              üé§ –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å
            </button>
          </div>
        )}
      </div>

      <div
        style={{
          padding: "12px",
          backgroundColor: "rgba(0, 122, 255, 0.1)",
          borderRadius: "8px",
          fontSize: "14px",
        }}
      >
        <div style={{ fontWeight: "600", marginBottom: "4px" }}>
          üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏:
        </div>
        <div>‚Ä¢ –ì–æ–≤–æ—Ä–∏—Ç–µ –≤ —Ç–∏—Ö–æ–º –º–µ—Å—Ç–µ</div>
        <div>‚Ä¢ –ß–µ—Ç–∫–æ –ø—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤</div>
        <div>‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –≤–µ—Å: "–¥–≤–µ—Å—Ç–∏ –≥—Ä–∞–º–º –∫—É—Ä–∏—Ü—ã"</div>
        <div>‚Ä¢ –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤</div>
      </div>

      <style jsx>{`
        @keyframes pulse {
          0% {
            transform: scale(1);
            opacity: 1;
          }
          50% {
            transform: scale(1.1);
            opacity: 0.8;
          }
          100% {
            transform: scale(1);
            opacity: 1;
          }
        }
      `}</style>
    </div>
  );
}

export default VoiceInput;
