import React, { useState, useEffect } from "react";
import "../styles/Assistant.css";

const Assistant = ({
  foodEntries,
  calorieData,
  userProfile,
  isSubscribed,
  onNavigate,
}) => {
  const [analysis, setAnalysis] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [chatMessages, setChatMessages] = useState([]);
  const [inputMessage, setInputMessage] = useState("");

  const today = new Date().toDateString();
  const todayEntries = foodEntries.filter((entry) => entry.date === today);

  const totalNutrition = todayEntries.reduce(
    (acc, entry) => ({
      calories: acc.calories + (entry.calories || 0),
      protein: acc.protein + (entry.protein || 0),
      carbs: acc.carbs + (entry.carbs || 0),
      fat: acc.fat + (entry.fat || 0),
    }),
    { calories: 0, protein: 0, carbs: 0, fat: 0 }
  );

  useEffect(() => {
    generateAnalysis();
  }, [foodEntries, calorieData]);

  const generateAnalysis = () => {
    setIsLoading(true);

    // –°–∏–º—É–ª—è—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ò–ò
    setTimeout(() => {
      const calorieDeficit =
        calorieData.dailyCalories - totalNutrition.calories;
      const proteinPercent =
        (totalNutrition.protein / calorieData.protein) * 100;
      const carbsPercent = (totalNutrition.carbs / calorieData.carbs) * 100;
      const fatPercent = (totalNutrition.fat / calorieData.fat) * 100;

      let recommendations = [];
      let status = "good";

      if (calorieDeficit > 500) {
        recommendations.push({
          type: "warning",
          text: `–£ –≤–∞—Å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –¥–µ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π (${Math.round(
            calorieDeficit
          )} –∫–∫–∞–ª). –î–æ–±–∞–≤—å—Ç–µ –ø–æ–ª–µ–∑–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.`,
          action: "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–ª–æ—Ä–∏–∏",
        });
        status = "warning";
      } else if (calorieDeficit < -300) {
        recommendations.push({
          type: "error",
          text: `–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã –Ω–∞ ${Math.abs(
            Math.round(calorieDeficit)
          )} –∫–∫–∞–ª. –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ —Å –ø–æ—Ä—Ü–∏—è–º–∏.`,
          action: "–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä—Ü–∏–∏",
        });
        status = "error";
      }

      if (proteinPercent < 80) {
        recommendations.push({
          type: "info",
          text: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–µ–ª–∫–∞ –≤ —Ä–∞—Ü–∏–æ–Ω–µ. –î–æ–±–∞–≤—å—Ç–µ –º—è—Å–æ, —Ä—ã–±—É, —è–π—Ü–∞ –∏–ª–∏ –±–æ–±–æ–≤—ã–µ.",
          action: "–î–æ–±–∞–≤–∏—Ç—å –±–µ–ª–æ–∫",
        });
      }

      if (carbsPercent > 120) {
        recommendations.push({
          type: "warning",
          text: "–ú–Ω–æ–≥–æ —É–≥–ª–µ–≤–æ–¥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç—ã–µ —É–≥–ª–µ–≤–æ–¥—ã –Ω–∞ —Å–ª–æ–∂–Ω—ã–µ.",
          action: "–ó–∞–º–µ–Ω–∏—Ç—å —É–≥–ª–µ–≤–æ–¥—ã",
        });
      }

      if (recommendations.length === 0) {
        recommendations.push({
          type: "success",
          text: "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í–∞—à —Ä–∞—Ü–∏–æ–Ω —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ü–µ–ª—è–º.",
          action: "–ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ",
        });
      }

      setAnalysis({
        status,
        calorieDeficit,
        macroBalance: { proteinPercent, carbsPercent, fatPercent },
        recommendations,
        tips: generateTips(),
      });

      setIsLoading(false);
    }, 1500);
  };

  const generateTips = () => {
    const tips = [
      "üíß –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø–∏—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–¥—ã - 30-35 –º–ª –Ω–∞ –∫–≥ –≤–µ—Å–∞ —Ç–µ–ª–∞",
      "ü•ó –í–∫–ª—é—á–∞–π—Ç–µ –æ–≤–æ—â–∏ –≤ –∫–∞–∂–¥—ã–π –ø—Ä–∏–µ–º –ø–∏—â–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–µ—Ç—á–∞—Ç–∫–∏",
      "‚è∞ –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –µ—Å—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ, –∫–∞–∂–¥—ã–µ 3-4 —á–∞—Å–∞",
      "üèÉ‚Äç‚ôÇÔ∏è –î–æ–±–∞–≤—å—Ç–µ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
      "üò¥ –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Å–æ–Ω –≤–ª–∏—è–µ—Ç –Ω–∞ –º–µ—Ç–∞–±–æ–ª–∏–∑–º –∏ –∞–ø–ø–µ—Ç–∏—Ç",
      "ü•ú –ü–µ—Ä–µ–∫—É—Å—ã–≤–∞–π—Ç–µ –æ—Ä–µ—Ö–∞–º–∏ –∏–ª–∏ —Ñ—Ä—É–∫—Ç–∞–º–∏ –≤–º–µ—Å—Ç–æ —Å–ª–∞–¥–æ—Å—Ç–µ–π",
    ];

    return tips.sort(() => 0.5 - Math.random()).slice(0, 3);
  };

  const handleSendMessage = () => {
    if (!inputMessage.trim()) return;

    const userMessage = {
      id: Date.now(),
      type: "user",
      text: inputMessage,
      timestamp: new Date(),
    };

    setChatMessages([...chatMessages, userMessage]);
    setInputMessage("");

    // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    setTimeout(() => {
      const response = generateResponse(inputMessage);
      const assistantMessage = {
        id: Date.now() + 1,
        type: "assistant",
        text: response,
        timestamp: new Date(),
      };

      setChatMessages((prev) => [...prev, assistantMessage]);
    }, 1000);
  };

  const generateResponse = (question) => {
    const lowerQuestion = question.toLowerCase();

    if (lowerQuestion.includes("–∫–∞–ª–æ—Ä")) {
      return `–í–∞—à–∞ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞: ${
        calorieData.dailyCalories
      } –∫–∫–∞–ª. –°–µ–≥–æ–¥–Ω—è –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: ${Math.round(
        totalNutrition.calories
      )} –∫–∫–∞–ª. ${
        totalNutrition.calories < calorieData.dailyCalories
          ? `–û—Å—Ç–∞–µ—Ç—Å—è ${Math.round(
              calorieData.dailyCalories - totalNutrition.calories
            )} –∫–∫–∞–ª.`
          : "–ù–æ—Ä–º–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∞, –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ —Å –ø–æ—Ä—Ü–∏—è–º–∏."
      }`;
    }

    if (lowerQuestion.includes("–±–µ–ª–æ–∫")) {
      return `–í–∞—à–∞ –Ω–æ—Ä–º–∞ –±–µ–ª–∫–∞: ${Math.round(
        calorieData.protein
      )}–≥ –≤ –¥–µ–Ω—å. –°–µ–≥–æ–¥–Ω—è –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: ${Math.round(
        totalNutrition.protein
      )}–≥. –•–æ—Ä–æ—à–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –±–µ–ª–∫–∞: –∫—É—Ä–∏—Ü–∞, —Ä—ã–±–∞, —è–π—Ü–∞, —Ç–≤–æ—Ä–æ–≥, –±–æ–±–æ–≤—ã–µ.`;
    }

    if (lowerQuestion.includes("–ø–æ—Ö—É–¥")) {
      return "–î–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è –≤–∞–∂–µ–Ω –¥–µ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π 300-500 –∫–∫–∞–ª –≤ –¥–µ–Ω—å, —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –∏ —Ä–µ–≥—É–ª—è—Ä–Ω–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –ù–µ —Ç–æ—Ä–æ–ø–∏—Ç–µ—Å—å - –∑–¥–æ—Ä–æ–≤–æ–µ –ø–æ—Ö—É–¥–µ–Ω–∏–µ 0.5-1 –∫–≥ –≤ –Ω–µ–¥–µ–ª—é.";
    }

    if (
      lowerQuestion.includes("—á—Ç–æ —Å—ä–µ—Å—Ç—å") ||
      lowerQuestion.includes("–ø–µ—Ä–µ–∫—É—Å")
    ) {
      return "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ: —è–±–ª–æ–∫–æ —Å –æ—Ä–µ—Ö–∞–º–∏, –≥—Ä–µ—á–µ—Å–∫–∏–π –π–æ–≥—É—Ä—Ç —Å —è–≥–æ–¥–∞–º–∏, –æ–≤–æ—â–Ω—ã–µ –ø–∞–ª–æ—á–∫–∏ —Å —Ö—É–º—É—Å–æ–º, –∏–ª–∏ –∫—É—Å–æ—á–µ–∫ —Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–æ–≥–æ —Ö–ª–µ–±–∞ —Å –∞–≤–æ–∫–∞–¥–æ.";
    }

    return "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å! –Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–µ –ø–∏—Ç–∞–Ω–∏–µ –∏ –º–æ–≥—É –¥–∞—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ –∫–∞–ª–æ—Ä–∏—è–º, –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–∞–º, –ø–æ—Ö—É–¥–µ–Ω–∏—é –∏ –∑–¥–æ—Ä–æ–≤—ã–º –ø–µ—Ä–µ–∫—É—Å–∞–º. –ó–∞–¥–∞–π—Ç–µ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å.";
  };

  return (
    <div className="assistant">
      <div className="assistant__header">
        <h1 className="assistant__title">ü§ñ –£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫</h1>
        <p className="assistant__subtitle">
          –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é
        </p>
      </div>

      {isLoading ? (
        <div className="assistant__loading">
          <div className="loading-spinner"></div>
          <p>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à —Ä–∞—Ü–∏–æ–Ω...</p>
        </div>
      ) : analysis ? (
        <div className="assistant__analysis">
          <div
            className={`analysis-status analysis-status--${analysis.status}`}
          >
            <div className="status-icon">
              {analysis.status === "good" && "‚úÖ"}
              {analysis.status === "warning" && "‚ö†Ô∏è"}
              {analysis.status === "error" && "‚ùå"}
            </div>
            <div className="status-text">
              <h3>–ê–Ω–∞–ª–∏–∑ —Ä–∞—Ü–∏–æ–Ω–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</h3>
              <p>
                {analysis.calorieDeficit > 0
                  ? `–î–µ—Ñ–∏—Ü–∏—Ç: ${Math.round(analysis.calorieDeficit)} –∫–∫–∞–ª`
                  : `–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ: ${Math.abs(
                      Math.round(analysis.calorieDeficit)
                    )} –∫–∫–∞–ª`}
              </p>
            </div>
          </div>

          <div className="recommendations">
            <h3>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h3>
            {analysis.recommendations.map((rec, index) => (
              <div
                key={index}
                className={`recommendation recommendation--${rec.type}`}
              >
                <div className="rec-icon">
                  {rec.type === "success" && "üéâ"}
                  {rec.type === "info" && "üí°"}
                  {rec.type === "warning" && "‚ö†Ô∏è"}
                  {rec.type === "error" && "üö®"}
                </div>
                <div className="rec-content">
                  <p>{rec.text}</p>
                  <span className="rec-action">{rec.action}</span>
                </div>
              </div>
            ))}
          </div>

          <div className="tips">
            <h3>üí° –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã</h3>
            {analysis.tips.map((tip, index) => (
              <div key={index} className="tip">
                <span className="tip-text">{tip}</span>
              </div>
            ))}
          </div>
        </div>
      ) : null}

      <div className="assistant__chat">
        <h3>–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ–º–æ—â–Ω–∏–∫—É</h3>

        {!isSubscribed && (
          <div className="subscription-notice">
            <p>üîí –ß–∞—Ç —Å –ò–ò –¥–æ—Å—Ç—É–ø–µ–Ω –≤ Premium –≤–µ—Ä—Å–∏–∏</p>
            <button
              className="upgrade-btn"
              onClick={() => onNavigate("settings")}
            >
              –û–±–Ω–æ–≤–∏—Ç—å –¥–æ Premium
            </button>
          </div>
        )}

        {isSubscribed && (
          <>
            <div className="chat-messages">
              {chatMessages.length === 0 ? (
                <div className="chat-placeholder">
                  <p>–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:</p>
                  <div className="example-questions">
                    <button
                      className="example-btn"
                      onClick={() =>
                        setInputMessage("–°–∫–æ–ª—å–∫–æ –∫–∞–ª–æ—Ä–∏–π –º–Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Å–µ–≥–æ–¥–Ω—è?")
                      }
                    >
                      –°–∫–æ–ª—å–∫–æ –∫–∞–ª–æ—Ä–∏–π –æ—Å—Ç–∞–ª–æ—Å—å?
                    </button>
                    <button
                      className="example-btn"
                      onClick={() => setInputMessage("–ß—Ç–æ —Å—ä–µ—Å—Ç—å –Ω–∞ –ø–µ—Ä–µ–∫—É—Å?")}
                    >
                      –ß—Ç–æ —Å—ä–µ—Å—Ç—å –Ω–∞ –ø–µ—Ä–µ–∫—É—Å?
                    </button>
                    <button
                      className="example-btn"
                      onClick={() => setInputMessage("–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ö—É–¥–µ—Ç—å?")}
                    >
                      –ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ö—É–¥–µ—Ç—å?
                    </button>
                  </div>
                </div>
              ) : (
                chatMessages.map((message) => (
                  <div
                    key={message.id}
                    className={`chat-message chat-message--${message.type}`}
                  >
                    <div className="message-content">
                      <p>{message.text}</p>
                      <span className="message-time">
                        {message.timestamp.toLocaleTimeString("ru-RU", {
                          hour: "2-digit",
                          minute: "2-digit",
                        })}
                      </span>
                    </div>
                  </div>
                ))
              )}
            </div>

            <div className="chat-input">
              <input
                type="text"
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..."
                onKeyPress={(e) => e.key === "Enter" && handleSendMessage()}
              />
              <button
                onClick={handleSendMessage}
                disabled={!inputMessage.trim()}
                className="send-btn"
              >
                üì§
              </button>
            </div>
          </>
        )}
      </div>
    </div>
  );
};

export default Assistant;
