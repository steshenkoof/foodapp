import React, { useState, useEffect } from "react";
import { motion } from "framer-motion";

const GoalStep = ({ data = {}, updateData }) => {
  const [selectedGoal, setSelectedGoal] = useState(data.goal || null);
  const [targetWeight, setTargetWeight] = useState(data.targetWeight || "");
  const [timeframe, setTimeframe] = useState(data.timeframe || "");

  useEffect(() => {
    updateData({
      goal: selectedGoal,
      targetWeight: targetWeight,
      timeframe: timeframe,
    });
  }, [selectedGoal, targetWeight, timeframe, updateData]);

  const goals = [
    {
      id: "lose_weight",
      title: "–ü–æ—Ö—É–¥–µ—Ç—å",
      subtitle: "–°–Ω–∏–∑–∏—Ç—å –≤–µ—Å",
      description: "–°–æ–∑–¥–∞—Ç—å –¥–µ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å–Ω–∏–∂–µ–Ω–∏—è –≤–µ—Å–∞",
      emoji: "üìâ",
      color: "#74B9FF",
      tips: [
        "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ",
        "–ö–æ–Ω—Ç—Ä–æ–ª—å –ø–æ—Ä—Ü–∏–π",
        "–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏",
      ],
      calorieAdjustment: -500,
    },
    {
      id: "maintain_weight",
      title: "–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤–µ—Å",
      subtitle: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ä–º—É",
      description: "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π –≤–µ—Å –∏ —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –ø–∏—Ç–∞–Ω–∏—è",
      emoji: "‚öñÔ∏è",
      color: "#00B894",
      tips: [
        "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞—Ü–∏–æ–Ω",
        "–ó–¥–æ—Ä–æ–≤—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏",
        "–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å –ø–∏—Ç–∞–Ω–∏—è",
      ],
      calorieAdjustment: 0,
    },
    {
      id: "gain_weight",
      title: "–ù–∞–±—Ä–∞—Ç—å –≤–µ—Å",
      subtitle: "–£–≤–µ–ª–∏—á–∏—Ç—å –º–∞—Å—Å—É",
      description:
        "–ó–¥–æ—Ä–æ–≤—ã–π –Ω–∞–±–æ—Ä –≤–µ—Å–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤",
      emoji: "üìà",
      color: "#FDCB6E",
      tips: ["–£–≤–µ–ª–∏—á–∏—Ç—å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å", "–ß–∞—Å—Ç—ã–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏", "–ë–µ–ª–∫–æ–≤–∞—è –ø–∏—â–∞"],
      calorieAdjustment: +500,
    },
    {
      id: "build_muscle",
      title: "–ù–∞–±—Ä–∞—Ç—å –º—ã—à–µ—á–Ω—É—é –º–∞—Å—Å—É",
      subtitle: "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º—É—Å–∫—É–ª–∞—Ç—É—Ä—É",
      description: "–£–≤–µ–ª–∏—á–∏—Ç—å –º—ã—à–µ—á–Ω—É—é –º–∞—Å—Å—É —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –±–µ–ª–∫–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ",
      emoji: "üí™",
      color: "#E17055",
      tips: [
        "–í—ã—Å–æ–∫–æ–±–µ–ª–∫–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ",
        "–ß–∞—Å—Ç—ã–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏",
        "–°–ª–æ–∂–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã",
      ],
      calorieAdjustment: +300,
    },
  ];

  const timeframes = [
    { value: "1-month", label: "1 –º–µ—Å—è—Ü", description: "–ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç" },
    { value: "3-months", label: "3 –º–µ—Å—è—Ü–∞", description: "–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥" },
    {
      value: "6-months",
      label: "6 –º–µ—Å—è—Ü–µ–≤",
      description: "–£—Å—Ç–æ–π—á–∏–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
    },
    { value: "1-year", label: "1 –≥–æ–¥", description: "–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è —Ü–µ–ª—å" },
  ];

  const selectedGoalData = goals.find((g) => g.id === selectedGoal);

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1,
      },
    },
  };

  const cardVariants = {
    hidden: { opacity: 0, y: 30, scale: 0.9 },
    visible: {
      opacity: 1,
      y: 0,
      scale: 1,
      transition: {
        type: "spring",
        stiffness: 400,
        damping: 25,
      },
    },
  };

  return (
    <motion.div
      style={{
        display: "flex",
        flexDirection: "column",
        gap: "32px",
        maxWidth: "700px",
        margin: "0 auto",
      }}
      variants={containerVariants}
      initial="hidden"
      animate="visible"
    >
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <motion.div
        style={{ textAlign: "center", marginBottom: "16px" }}
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
      >
        <h3
          style={{
            fontSize: "28px",
            margin: "0 0 8px",
            color: "var(--text-color)",
            fontWeight: "700",
          }}
        >
          –í–∞—à–∞ —Ü–µ–ª—å üéØ
        </h3>
        <p
          style={{
            fontSize: "16px",
            color: "var(--secondary-text-color)",
            margin: 0,
            lineHeight: "1.5",
          }}
        >
          –í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é —Ü–µ–ª—å, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ—Å—Ç–∏—á—å
        </p>
      </motion.div>

      {/* –ö–∞—Ä—Ç–æ—á–∫–∏ —Ü–µ–ª–µ–π */}
      <motion.div
        style={{
          display: "grid",
          gridTemplateColumns: "repeat(auto-fit, minmax(300px, 1fr))",
          gap: "20px",
        }}
        variants={containerVariants}
      >
        {goals.map((goal, index) => (
          <motion.div
            key={goal.id}
            style={{
              background:
                selectedGoal === goal.id
                  ? `linear-gradient(135deg, ${goal.color}25, ${goal.color}10)`
                  : "rgba(255, 255, 255, 0.05)",
              border:
                selectedGoal === goal.id
                  ? `2px solid ${goal.color}`
                  : "2px solid rgba(255, 255, 255, 0.1)",
              borderRadius: "24px",
              padding: "28px",
              cursor: "pointer",
              position: "relative",
              overflow: "hidden",
            }}
            variants={cardVariants}
            whileHover={{
              transform: "translateY(-6px)",
              boxShadow: `0 12px 40px ${goal.color}30`,
            }}
            whileTap={{ scale: 0.97 }}
            onClick={() => setSelectedGoal(goal.id)}
          >
            {/* –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç */}
            <motion.div
              style={{
                position: "absolute",
                top: "-30px",
                right: "-30px",
                width: "80px",
                height: "80px",
                background: `radial-gradient(circle, ${goal.color}25 0%, transparent 70%)`,
                borderRadius: "50%",
                filter: "blur(30px)",
                pointerEvents: "none",
              }}
              animate={{
                scale: selectedGoal === goal.id ? [1, 1.3, 1] : 1,
                opacity: selectedGoal === goal.id ? [0.4, 0.7, 0.4] : 0.3,
              }}
              transition={{
                duration: 4,
                repeat: Infinity,
                ease: "easeInOut",
              }}
            />

            {/* –ò–∫–æ–Ω–∫–∞ –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ */}
            <div
              style={{
                display: "flex",
                alignItems: "center",
                marginBottom: "20px",
                position: "relative",
              }}
            >
              <motion.div
                style={{
                  fontSize: "40px",
                  marginRight: "20px",
                  padding: "12px",
                  background: `${goal.color}20`,
                  borderRadius: "16px",
                  border: `2px solid ${goal.color}30`,
                }}
                animate={{
                  scale: selectedGoal === goal.id ? [1, 1.05, 1] : 1,
                  rotate: selectedGoal === goal.id ? [0, 5, -5, 0] : 0,
                }}
                transition={{
                  duration: 2,
                  repeat: Infinity,
                  ease: "easeInOut",
                }}
              >
                {goal.emoji}
              </motion.div>

              <div>
                <h4
                  style={{
                    fontSize: "20px",
                    margin: "0 0 6px",
                    color:
                      selectedGoal === goal.id
                        ? goal.color
                        : "var(--text-color)",
                    fontWeight: "700",
                    transition: "color 0.3s ease",
                  }}
                >
                  {goal.title}
                </h4>
                <p
                  style={{
                    fontSize: "14px",
                    color: "var(--secondary-text-color)",
                    margin: 0,
                    fontWeight: "500",
                  }}
                >
                  {goal.subtitle}
                </p>
              </div>
            </div>

            {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
            <p
              style={{
                fontSize: "15px",
                color: "var(--secondary-text-color)",
                lineHeight: "1.5",
                marginBottom: "20px",
              }}
            >
              {goal.description}
            </p>

            {/* –°–æ–≤–µ—Ç—ã */}
            <div style={{ marginBottom: "20px" }}>
              <p
                style={{
                  fontSize: "13px",
                  color: "var(--secondary-text-color)",
                  marginBottom: "12px",
                  fontWeight: "600",
                  textTransform: "uppercase",
                  letterSpacing: "0.5px",
                }}
              >
                –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
              </p>
              <div
                style={{
                  display: "flex",
                  flexDirection: "column",
                  gap: "8px",
                }}
              >
                {goal.tips.map((tip, idx) => (
                  <div
                    key={idx}
                    style={{
                      fontSize: "13px",
                      color:
                        selectedGoal === goal.id
                          ? goal.color
                          : "var(--text-color)",
                      background:
                        selectedGoal === goal.id
                          ? `${goal.color}15`
                          : "rgba(255, 255, 255, 0.08)",
                      padding: "8px 12px",
                      borderRadius: "8px",
                      border:
                        selectedGoal === goal.id
                          ? `1px solid ${goal.color}30`
                          : "1px solid rgba(255, 255, 255, 0.1)",
                      transition: "all 0.3s ease",
                      display: "flex",
                      alignItems: "center",
                      gap: "8px",
                    }}
                  >
                    <span style={{ color: goal.color }}>‚Ä¢</span>
                    {tip}
                  </div>
                ))}
              </div>
            </div>

            {/* –ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å */}
            <div
              style={{
                display: "flex",
                justifyContent: "space-between",
                alignItems: "center",
                paddingTop: "16px",
                borderTop: "1px solid rgba(255, 255, 255, 0.1)",
              }}
            >
              <span
                style={{
                  fontSize: "13px",
                  color: "var(--secondary-text-color)",
                }}
              >
                –ö–∞–ª–æ—Ä–∏–∏: {goal.calorieAdjustment >= 0 ? "+" : ""}
                {goal.calorieAdjustment}
              </span>

              {selectedGoal === goal.id && (
                <motion.div
                  style={{
                    color: goal.color,
                    fontSize: "20px",
                  }}
                  initial={{ scale: 0, opacity: 0 }}
                  animate={{ scale: 1, opacity: 1 }}
                  transition={{
                    type: "spring",
                    stiffness: 400,
                    damping: 15,
                  }}
                >
                  ‚úì
                </motion.div>
              )}
            </div>
          </motion.div>
        ))}
      </motion.div>

      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
      {selectedGoal &&
        (selectedGoal === "lose_weight" || selectedGoal === "gain_weight") && (
          <motion.div
            style={{
              background: "rgba(255, 255, 255, 0.05)",
              border: "1px solid rgba(255, 255, 255, 0.1)",
              borderRadius: "20px",
              padding: "28px",
            }}
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{
              type: "spring",
              stiffness: 400,
              damping: 25,
              delay: 0.3,
            }}
          >
            <h4
              style={{
                fontSize: "18px",
                margin: "0 0 20px",
                color: "var(--text-color)",
                fontWeight: "600",
                textAlign: "center",
              }}
            >
              –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ üéõÔ∏è
            </h4>

            <div
              style={{
                display: "grid",
                gridTemplateColumns: "repeat(auto-fit, minmax(250px, 1fr))",
                gap: "24px",
              }}
            >
              {/* –¶–µ–ª–µ–≤–æ–π –≤–µ—Å */}
              <div>
                <label
                  style={{
                    display: "block",
                    marginBottom: "8px",
                    fontSize: "14px",
                    fontWeight: "600",
                    color: "var(--text-color)",
                  }}
                >
                  –¶–µ–ª–µ–≤–æ–π –≤–µ—Å (–∫–≥)
                </label>
                <motion.input
                  type="number"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å"
                  value={targetWeight}
                  onChange={(e) => setTargetWeight(e.target.value)}
                  style={{
                    width: "100%",
                    padding: "12px 16px",
                    borderRadius: "12px",
                    border: "2px solid var(--border-color)",
                    background: "rgba(255, 255, 255, 0.05)",
                    color: "var(--text-color)",
                    fontSize: "14px",
                    outline: "none",
                    transition: "all 0.3s ease",
                    boxSizing: "border-box",
                  }}
                  whileFocus={{
                    borderColor:
                      selectedGoalData?.color || "var(--primary-color)",
                    boxShadow: `0 0 0 3px ${
                      selectedGoalData?.color || "var(--primary-color)"
                    }20`,
                  }}
                />
              </div>

              {/* –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ */}
              <div>
                <label
                  style={{
                    display: "block",
                    marginBottom: "8px",
                    fontSize: "14px",
                    fontWeight: "600",
                    color: "var(--text-color)",
                  }}
                >
                  –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏
                </label>
                <div
                  style={{
                    display: "grid",
                    gridTemplateColumns: "repeat(2, 1fr)",
                    gap: "8px",
                  }}
                >
                  {timeframes.map((tf) => (
                    <motion.button
                      key={tf.value}
                      style={{
                        padding: "10px 12px",
                        borderRadius: "10px",
                        border:
                          timeframe === tf.value
                            ? `2px solid ${
                                selectedGoalData?.color ||
                                "var(--primary-color)"
                              }`
                            : "2px solid rgba(255, 255, 255, 0.1)",
                        background:
                          timeframe === tf.value
                            ? `${
                                selectedGoalData?.color ||
                                "var(--primary-color)"
                              }20`
                            : "rgba(255, 255, 255, 0.05)",
                        color:
                          timeframe === tf.value
                            ? selectedGoalData?.color || "var(--primary-color)"
                            : "var(--text-color)",
                        fontSize: "13px",
                        fontWeight: "500",
                        cursor: "pointer",
                        transition: "all 0.3s ease",
                        textAlign: "center",
                      }}
                      whileHover={{
                        transform: "translateY(-1px)",
                        boxShadow: `0 4px 12px ${
                          selectedGoalData?.color || "var(--primary-color)"
                        }20`,
                      }}
                      whileTap={{ scale: 0.98 }}
                      onClick={() => setTimeframe(tf.value)}
                    >
                      <div style={{ fontWeight: "600" }}>{tf.label}</div>
                      <div
                        style={{
                          fontSize: "11px",
                          opacity: 0.8,
                          marginTop: "2px",
                        }}
                      >
                        {tf.description}
                      </div>
                    </motion.button>
                  ))}
                </div>
              </div>
            </div>
          </motion.div>
        )}

      {/* –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å */}
      {selectedGoal && (
        <motion.div
          style={{
            background: `linear-gradient(135deg, ${selectedGoalData.color}20, ${selectedGoalData.color}10)`,
            border: `1px solid ${selectedGoalData.color}30`,
            borderRadius: "20px",
            padding: "24px",
            textAlign: "center",
          }}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{
            type: "spring",
            stiffness: 400,
            damping: 25,
            delay: 0.4,
          }}
        >
          <motion.div
            style={{ fontSize: "28px", marginBottom: "12px" }}
            animate={{
              scale: [1, 1.1, 1],
              rotate: [0, 10, -10, 0],
            }}
            transition={{
              duration: 3,
              repeat: Infinity,
              ease: "easeInOut",
            }}
          >
            üöÄ
          </motion.div>
          <h4
            style={{
              fontSize: "18px",
              margin: "0 0 8px",
              color: selectedGoalData.color,
              fontWeight: "700",
            }}
          >
            –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!
          </h4>
          <p
            style={{
              fontSize: "15px",
              color: "var(--text-color)",
              margin: "0 0 12px",
              fontWeight: "500",
            }}
          >
            –ú—ã —Å–æ–∑–¥–∞–¥–∏–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤–∞—à–µ–π —Ü–µ–ª–∏
          </p>
          <p
            style={{
              fontSize: "13px",
              color: "var(--secondary-text-color)",
              margin: 0,
              lineHeight: "1.4",
            }}
          >
            –ü–æ–º–Ω–∏—Ç–µ: —É—Å—Ç–æ–π—á–∏–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ—Å—Ç–∏–≥–∞—é—Ç—Å—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º
            –ø–æ–¥—Ö–æ–¥–æ–º –∫ –ø–∏—Ç–∞–Ω–∏—é! üí™
          </p>
        </motion.div>
      )}
    </motion.div>
  );
};

export default GoalStep;
