import React, { useState } from "react";

function HeightWeight({ data, onNext, onBack }) {
  const [height, setHeight] = useState(data.height || "");
  const [weight, setWeight] = useState(data.weight || "");

  const handleSubmit = (e) => {
    e.preventDefault();
    if (height && weight) {
      onNext({ height: parseInt(height), weight: parseFloat(weight) });
    }
  };

  const isValidHeight = height && height >= 120 && height <= 250;
  const isValidWeight = weight && weight >= 30 && weight <= 300;
  const isValid = isValidHeight && isValidWeight;

  return (
    <div className="fade-in">
      <div className="text-center mb-6">
        <h2
          style={{ fontSize: "24px", fontWeight: "700", marginBottom: "8px" }}
        >
          –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–ª–∞
        </h2>
        <p style={{ color: "var(--secondary-text-color)" }}>
          –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –∏ –≤–µ—Å
        </p>
      </div>

      <form onSubmit={handleSubmit}>
        <div className="form-group">
          <label className="form-label">–†–æ—Å—Ç (—Å–º)</label>
          <input
            type="number"
            className="form-input"
            value={height}
            onChange={(e) => setHeight(e.target.value)}
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä, 175"
            min="120"
            max="250"
          />
          {height && !isValidHeight && (
            <p
              style={{
                color: "var(--danger-color)",
                fontSize: "14px",
                marginTop: "4px",
              }}
            >
              –†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 120 –¥–æ 250 —Å–º
            </p>
          )}
        </div>

        <div className="form-group">
          <label className="form-label">–í–µ—Å (–∫–≥)</label>
          <input
            type="number"
            step="0.1"
            className="form-input"
            value={weight}
            onChange={(e) => setWeight(e.target.value)}
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä, 70.5"
            min="30"
            max="300"
          />
          {weight && !isValidWeight && (
            <p
              style={{
                color: "var(--danger-color)",
                fontSize: "14px",
                marginTop: "4px",
              }}
            >
              –í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 30 –¥–æ 300 –∫–≥
            </p>
          )}
        </div>

        {height && weight && isValid && (
          <div
            className="card"
            style={{
              backgroundColor: "rgba(52, 199, 89, 0.1)",
              border: "1px solid var(--secondary-color)",
            }}
          >
            <div style={{ textAlign: "center" }}>
              <div
                style={{
                  fontSize: "18px",
                  fontWeight: "600",
                  marginBottom: "4px",
                }}
              >
                –ò–ú–¢: {(weight / (height / 100) ** 2).toFixed(1)}
              </div>
              <div
                style={{
                  fontSize: "14px",
                  color: "var(--secondary-text-color)",
                }}
              >
                {(() => {
                  const bmi = weight / (height / 100) ** 2;
                  if (bmi < 18.5) return "üìâ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –≤–µ—Å";
                  if (bmi < 25) return "‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–µ—Å";
                  if (bmi < 30) return "üìà –ò–∑–±—ã—Ç–æ—á–Ω—ã–π –≤–µ—Å";
                  return "üî¥ –û–∂–∏—Ä–µ–Ω–∏–µ";
                })()}
              </div>
            </div>
          </div>
        )}

        <div style={{ display: "flex", gap: "12px", marginTop: "32px" }}>
          <button
            type="button"
            className="btn btn-secondary"
            onClick={onBack}
            style={{ flex: "0 0 auto", width: "80px" }}
          >
            –ù–∞–∑–∞–¥
          </button>

          <button
            type="submit"
            className="btn btn-primary"
            disabled={!isValid}
            style={{ flex: 1 }}
          >
            –î–∞–ª–µ–µ
          </button>
        </div>
      </form>
    </div>
  );
}

export default HeightWeight;
